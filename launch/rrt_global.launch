<launch>
    
    <arg name="use_dron" default="true"/>
    <arg name="mission_enabled" default="false"/> <!-- To use mission_interface node-->
    <arg name="hmi" default="false"/> 
    <arg name="launch_robot_marker" default="true"/>
    
    <arg name="lidar_topic" default="os1_cloud_node/points"/>
    <arg name="use_octomap" default="true"/>
    <arg name="verbose_optimizer" default="false"/>
    <arg name="debug_msgs" default="true"/>
    <arg name="show_config_msgs" default="true"/>

    <arg name="use_catenary_planning" default="true"/>
    <arg name="use_search_pyramid_planning" default="true"/>
    <arg name="multiplicative_factor"  default="1.001"/>    
    <arg name="length_tether_max"    default="20.0"/>   

    <arg name="scenario_number"        default="1"/>
    <arg name="num_pos_initial"         default="1"/>
    <arg name="num_goal"         default="0"/>
    <arg name="n_iter_rrtstar"         default="4000"/>
    <arg name="radius_near_nodes"         default="2.0"/> 
    <arg name="goal_gap_m"         default="0.8"/>
    <arg name="step_steer"         default="0.5"/>
    <arg name="coupled"         default="true"/>
    <arg name="samp_goal_rate"         default="12"/>


        <!-- Mission Planner -->
        <!-- <node pkg="theta_star_2d" type="action_goal_interface_node" name="mission_interface">
            <remap from="/Execute_Mission" to="Execute_Mission"/>
            <remap from="/Make_Plan" to="Make_Plan"/>
            <param name="hmi_mode" value="$(arg hmi)"/>
            <param name="mission_enabled" value="$(arg mission_enabled)"/>
            <param name="waiting_time" value="5.0"/>
        </node> -->

        <!-- Global Planner: Theta* -->
        <node pkg="rrt_star_planners" type="rrt_star_planner_node" name="rrt_star_planner_node" output="screen"># launch-prefix="gdb -ex run --args">
            <rosparam command="load" file="$(find marsupial_g2o)/cfg/3d_global_params.yaml"/>
            <param name="ugv_base_frame" value="ugv_base_link"/> 
            <param name="uav_base_frame" value="uav_base_link"/>
            <remap from="/Make_Plan" to="Make_Plan"/>
            <remap from="/Execute_Plan" to="Execute_Plan"/>
            <remap from="/points" to="mcl3d_node/map_point_cloud" if="$(eval arg('use_dron') and not arg('use_octomap'))" />
            <param name="mode3d" value="$(arg use_dron)"/>
            <param name="use_octomap" value="$(arg use_octomap)"/>
            <param name="debug" value="$(arg debug_msgs)"/>
            <param name="robot_base_frame" value="uav_base_link"/>
            <param name="timeout" value="10"/>
            <param name="use_catenary" value="$(arg use_catenary_planning)"/>  
            <param name="use_search_pyramid" value="$(arg use_search_pyramid_planning)"/>   
            <param name="n_iter" value="$(arg n_iter_rrtstar)"/>   
            <param name="radius_near_nodes" value="$(arg radius_near_nodes)"/>   
            <param name="step_steer" value="$(arg step_steer)"/>   
            <param name="multiplicative_factor" value="$(arg multiplicative_factor)"/>     
            <param name="length_tether_max" value="$(arg length_tether_max)"/>   
            <param name="write_data_for_analysis"    value="true"/>     
            <param name="path"   value="/home/simon/"/>     
            <param name="coupled"   value="$(arg coupled)"/>     
            <param name="goal_gap_m"   value="$(arg goal_gap_m)"/>    
            <param name="samp_goal_rate"   value="$(arg samp_goal_rate)"/>    
        </node>

        <!-- Local Planner: Optimizer G2O-->
        <node pkg="marsupial_g2o" type="optimizer_local_planner_node" name="optimizer_local_planner_node" output="screen"># launch-prefix="gdb -ex run --args"> #launch-prefix="valgrind">
            <rosparam command="load" file="$(find marsupial_g2o)/cfg/3d_local_params.yaml"/>
            <remap from="/Execute_Plan" to="Execute_Plan"/>
            <remap from="/Navigation" to="Navigation"/>
            <remap from="/points" to="$(arg lidar_topic)" if="$(eval not arg('use_octomap') and arg('use_dron'))" />
            <remap from="/octomap_binary_local" to="/octomap_full_local" if="$(eval arg('use_dron') and arg('use_octomap'))"/>
            <param name="debug" value="$(arg debug_msgs)"/>
            <param name="show_config" value="$(arg show_config_msgs)"/>
            <param name="mode3d" value="$(arg use_dron)"/>
            <!-- <param name="uav_base_frame" value="uav_base_link"/>
            <param name="ugv_base_frame" value="ugv_base_link"/> -->
            <param name="traj_dest_frame" value="uav_base_link"/>
            <param name="timeout" value="0.4"/>
            <param name="final_search_around" value="1.4"/>
            
            <param name="verbose_optimizer" value="$(arg verbose_optimizer)"/>

            <param name="w_alpha" value="0.6"/>   # equi-distance 
            <param name="w_beta"    value="0.9"/>   # obstacles 
            <param name="w_gamma"   value="0.6"/>   # kinematics 
            <param name="w_delta"    value="0.1"/>  # time 
            <param name="w_epsilon"     value="0.45"/>   # velocity 
            <param name="w_zeta"   value="0.1"/>   # acceleration 
            <param name="w_eta"   value="0.5"/>   # catenary 
            <param name="w_lambda"   value="0.1"/>   # dynamic catenary 

            <param name="n_iter_opt"    value="1"/>   <!-- number max. of iterations per optimization --> 
            
            <param name="td_"    value="0.0"/>   <!-- Time Sleep between optimization in Loop-For --> 
            <param name="initial_multiplicative_factor_length_catenary"   value="1.002"/>    <!-- This parameter multiply the length between UGV and vertex to adjust Catenary-->
            <param name="distance_obstacle"         value="1.0"/> <!-- bound distance UAV to obstacles [m]-->
            <param name="initial_velocity"      value="2.0"/> <!-- [m/seg]  Constant velocity during trajectory-->
            <param name="initial_acceleration"  value="0.0"/> <!-- [m/seg^2]  0 acceleration during trajectory-->
            <param name="angle_min_traj"  value="$(eval 3.1415 / 6.0)"/> 
            <param name="min_distance_add_new_point" value="1.0"/>  
            #Parameter for Edge Catenary
            <param name="distance_catenary_obstacle"  value="0.2"/> <!--bound distance catenary to obstacles [m] -->   
            <param name="dynamic_catenary"  value="0.5"/> <!-- [m/seg] Max. Vel. that reel can folding and unfolding tether-->    
            #Parameter for Bisection Method
            <param name="z_constraint"      value="0.1"/> <!-- Z constraint under pos reel UGV-->
            #Parameter to write file 
            <param name="write_data_for_analysis"    value="true"/>     
            <param name="name_output_file"    value="results_optimization"/>     
            <param name="scenario_number"    value="$(arg scenario_number)"/>     
            <param name="num_pos_initial"   value="$(arg num_pos_initial)"/>     
            <param name="num_goal"   value="$(arg num_goal)"/>     
            <param name="path"   value="/home/simon/"/>     
        </node>


        <!-- Robot Marker -->
        <node pkg="upo_markers" type="siar_marker_node" name="ugv_marker_node" output="screen" if="$(arg launch_robot_marker)">
            <param name="frame_id" value="ugv_base_link"/>
            <param name="scale" value="2.0"/>

        </node>

         <!-- Robot Marker -->
        <node pkg="upo_markers" type="marker_node" name="uav_marker_node" output="screen" if="$(arg launch_robot_marker)">
            <param name="base_frame_id" value="uav_base_link"/>
            <param name="model" value="m100"/> <!-- m600 or m100 -->
            <param name="color" value="0.0"/> 
            <param name="color_r" value="0.0"/> 
            <param name="color_g" value="0.0"/> 
            <param name="color_b" value="0.0"/> 
            <param name="scale" value="1.0"/>
        </node>

        <node pkg="upo_markers" type="marker_node" name="circle_marker_node" output="screen" if="$(arg launch_robot_marker)">
            <param name="base_frame_id" value="uav_base_link"/>
            <param name="model" value="circle"/> 
            <param name="radius" value="0.6"/> 
            <param name="color" value="0.5"/> 
            <param name="color_r" value="0.8"/> 
            <param name="color_g" value="0.4"/> 
            <param name="color_b" value="0.0"/> 
            <param name="scale_x" value="0.2"/> 
            <param name="scale_y" value="0.2"/> 
            <param name="scale_z" value="0.2"/> 
            <param name="scale" value="1.0"/>
        </node>

</launch>
