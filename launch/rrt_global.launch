<launch>
    <arg name="planner_type" default="rrt_star"/>
    <arg name="use_dron" default="true"/>
    <arg name="launch_robot_marker" default="true"/>
    
    <arg name="lidar_topic" default="os1_cloud_node/points"/>
    <arg name="use_octomap" default="true"/>
    <arg name="verbose_optimizer" default="false"/>
    <arg name="debug_msgs" default="true"/>
    <arg name="show_config_msgs" default="true"/>

    <arg name="use_catenary_planning" default="true"/>
    <arg name="use_search_pyramid_planning" default="false"/>
    <arg name="length_tether_max"    default="20.0"/>   

    <arg name="scenario_number"        default="1"/>
    <arg name="num_pos_initial"         default="1"/>
    <arg name="name_output_file"    default="results_optimization"/>     
    <arg name="num_goal"         default="0"/>
    <arg name="n_iter_rrt"         default="500"/>
    <arg name="n_loop_rrt"         default="10"/>
    <arg name="radius_near_nodes"         default="1.0"/> 
    <arg name="goal_gap_m"         default="0.8"/>
    <arg name="step_steer"         default="0.5"/>
    <arg name="coupled"         default="true"/>
    <arg name="samp_goal_rate"         default="12"/>
    <arg name="sample_mode_rrt"         default="1"/>


    <!-- Global Planner: RRT* -->
    <node pkg="rrt_planners" type="rrt_global_planner_node" name="rrt_planner_node" output="screen"># launch-prefix="gdb -ex run --args">
        <rosparam command="load" file="$(find marsupial_optimizer)/cfg/3d_global_params.yaml"/>
        <rosparam command="load" file="$(find marsupial_optimizer)/cfg/stage_$(arg scenario_number)_ws.yaml"/>
        <param name="planner_type" value="$(arg planner_type)"/> 
        <param name="ugv_base_frame" value="ugv_base_link"/> 
        <param name="uav_base_frame" value="uav_base_link"/>
        <remap from="/Make_Plan" to="Make_Plan"/>
        <remap from="/Execute_Plan" to="Execute_Plan"/>
        <remap from="/points" to="mcl3d_node/map_point_cloud" if="$(eval arg('use_dron') and not arg('use_octomap'))" />
        <param name="mode3d" value="$(arg use_dron)"/>
        <param name="use_octomap" value="$(arg use_octomap)"/>
        <param name="debug" value="$(arg debug_msgs)"/>
        <param name="robot_base_frame" value="uav_base_link"/>
        <param name="timeout" value="10"/>
        <param name="use_catenary" value="$(arg use_catenary_planning)"/>  
        <param name="use_search_pyramid" value="$(arg use_search_pyramid_planning)"/>   
        <param name="n_iter" value="$(arg n_iter_rrt)"/>   
        <param name="n_loop" value="$(arg n_loop_rrt)"/>   
        <param name="radius_near_nodes" value="$(arg radius_near_nodes)"/>   
        <param name="step_steer" value="$(arg step_steer)"/>   
        <param name="length_tether_max" value="$(arg length_tether_max)"/>   
        <param name="write_data_for_analysis"    value="true"/>     
        <param name="path"   value="/home/simon/"/>  
        <param name="name_output_file"    value="$(arg name_output_file)"/>     
        <param name="scenario_number"    value="$(arg scenario_number)"/>     
        <param name="num_pos_initial"   value="$(arg num_pos_initial)"/>     
        <param name="num_goal"   value="$(arg num_goal)"/>     
        <param name="coupled"   value="$(arg coupled)"/>     
        <param name="goal_gap_m"   value="$(arg goal_gap_m)"/>    
        <param name="samp_goal_rate"   value="$(arg samp_goal_rate)"/>  
        <param name="debug_rrt"    value="false"/>     
        <param name="sample_mode"    value="$(arg sample_mode_rrt)"/>     
    </node>

    <!-- Local Planner: Optimizer Ceres-->
    <node pkg="marsupial_optimizer" type="optimizer_local_planner_node" name="optimizer_local_planner_node" output="screen"># launch-prefix="gdb -ex run --args"> #launch-prefix="valgrind">
        <rosparam command="load" file="$(find marsupial_optimizer)/cfg/3d_local_params.yaml"/>
        <remap from="/Execute_Plan" to="Execute_Plan"/>
        <remap from="/Navigation" to="Navigation"/>
        <remap from="/points" to="$(arg lidar_topic)" if="$(eval not arg('use_octomap') and arg('use_dron'))" />
        <remap from="/octomap_binary_local" to="/octomap_binary"/>
        <param name="debug" value="$(arg debug_msgs)"/>
        <param name="show_config" value="$(arg show_config_msgs)"/>
        <!-- <param name="mode3d" value="$(arg use_dron)"/> -->
        <!-- <param name="uav_base_frame" value="uav_base_link"/>
        <param name="ugv_base_frame" value="ugv_base_link"/> -->
        <param name="traj_dest_frame" value="uav_base_link"/>
        <!-- <param name="timeout" value="0.4"/> -->
        <!-- <param name="final_search_around" value="1.4"/> -->
        <param name="use_octomap_local" value="true"/>
            
        <param name="verbose_optimizer" value="$(arg verbose_optimizer)"/>
       
        <param name="w_alpha_ugv"   value="1.000"/>   # equi-distance ugv
        <param name="w_beta_ugv"    value="0.100"/>   # obstacles ugv
        <param name="w_iota_uav"    value="0.800"/>   # obstacles through ugv
        <param name="w_theta_ugv"   value="0.180"/>   # traversability ugv
        <param name="w_gamma_ugv"   value="0.100"/>   # kinematics ugv 
        <param name="w_kappa_ugv"   value="0.010"/>   # rotation ugv 
        <param name="w_delta_ugv"     value="0.003"/>  # time 
        <param name="w_epsilon_ugv"   value="0.0004"/>   # velocity 
        <param name="w_zeta_ugv"      value="0.0001"/>   # acceleration 
        
        <param name="w_alpha_uav"   value="0.250"/>   # equi-distance uav
        <param name="w_beta_uav"    value="0.010"/>   # obstacles uav
        <param name="w_iota_uav"    value="0.001"/>   # obstacles through uav
        <param name="w_gamma_uav"   value="0.020"/>   # kinematics uav 
        <param name="w_kappa_uav"   value="0.05"/>   # rotation uav 
        <param name="w_delta"     value="0.003"/>  # time 
        <param name="w_epsilon"   value="0.001"/>   # velocity 
        <param name="w_zeta"      value="0.0006"/>   # acceleration 
        
        <param name="w_eta"    value="0.12"/>   # catenary 
        <param name="w_lambda" value="0.0"/>   # dynamic catenary 

        <param name="n_iter_opt"    value="500"/>   <!-- number max. of iterations per optimization --> 
        <param name="length_tether_max" value="$(arg length_tether_max)"/>  
            
        <param name="distance_obstacle_ugv"         value="0.5"/> <!-- bound distance UGV to obstacles [m]-->
        <param name="distance_obstacle_uav"         value="1.0"/> <!-- bound distance UAV to obstacles [m]-->
        <param name="initial_velocity_ugv"  value="1.0"/> <!-- [m/seg]  Constant velocity UGV during trajectory-->
        <param name="initial_velocity_uav"  value="1.0"/> <!-- [m/seg]  Constant velocity UAV during trajectory-->
        <param name="initial_acceleration_ugv"  value="0.0"/> <!-- [m/seg^2] 0 acceleration UAV during trajectory-->
        <param name="initial_acceleration_uav"  value="0.0"/> <!-- [m/seg^2] 0 acceleration UGV during trajectory-->
        <param name="angle_min_traj"  value="$(eval 3.1415 / 9.0)"/> 
        <param name="min_distance_add_new_point" value="1.0"/>  
        #Parameter for Edge Catenary
        <param name="distance_catenary_obstacle"  value="0.2"/> <!--bound distance catenary to obstacles [m] -->   
        <param name="dynamic_catenary"  value="0.5"/> <!-- [m/seg] Max. Vel. that reel can folding and unfolding tether-->    
        #Parameter to write file 
        <param name="write_data_for_analysis"    value="true"/>     
        <param name="name_output_file"    value="$(arg name_output_file)"/>     
        <param name="scenario_number"    value="$(arg scenario_number)"/>     
        <param name="num_pos_initial"   value="$(arg num_pos_initial)"/>     
        <param name="num_goal"   value="$(arg num_goal)"/>     
        <param name="path"   value="/home/simon/"/>     
    </node>


    <!-- Robot Marker -->
    <node pkg="upo_markers" type="siar_marker_node" name="siar_marker_node" output="screen">
        <param name="frame_id" value="ugv_base_link"/>
        <param name="scale" value="2.0"/>
    </node>

     <!-- Robot Marker -->
    <node pkg="upo_markers" type="marker_node" name="uav_marker_node" output="screen">
        <param name="base_frame_id" value="uav_base_link"/>
        <param name="model" value="m100"/> <!-- m600 or m100 -->
        <param name="color" value="0.0"/> 
        <param name="color_r" value="0.0"/> 
        <param name="color_g" value="0.0"/> 
        <param name="color_b" value="0.0"/> 
        <param name="scale" value="1.0"/>
    </node>

    <node pkg="upo_markers" type="marker_node" name="circle_marker_node" output="screen">
        <param name="base_frame_id" value="uav_base_link"/>
        <param name="model" value="circle"/> 
        <param name="radius" value="0.6"/> 
        <param name="color" value="0.5"/> 
        <param name="color_r" value="0.8"/> 
        <param name="color_g" value="0.4"/> 
        <param name="color_b" value="0.0"/> 
        <param name="scale_x" value="0.2"/> 
        <param name="scale_y" value="0.2"/> 
        <param name="scale_z" value="0.2"/> 
        <param name="scale" value="1.0"/>
    </node>

</launch>
